import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class WordCnt
{
  public static class TokenizerMapper1 extends Mapper<LongWritable,Text,Text,IntWritable>
  {
	  private static final IntWritable one =new IntWritable(1);
	  private Text word=new Text();
	  public void map(LongWritable key,Text value,Context context)throws IOException,InterruptedException
	  {
		  StringTokenizer itr=new StringTokenizer(value.toString());
		  while(itr.hasMoreTokens())
		  {
			  String myword=itr.nextToken().toLowerCase();
			  word.set(myword);
			  context.write(word, one);
		  }
	  }
  }
  public static class IntSumReducer1 extends Reducer<Text,IntWritable,Text,IntWritable>
  {
	  //private IntWritable result=new IntWritable();
	  public void reduce(Text key,Iterable<IntWritable> values,Context context)throws IOException,InterruptedException
	  {
		  int sum = 0;
		  for(IntWritable val : values)
		  {
			sum += val.get();  
		  }
		  //sum=100;
		  //result.set(sum);
		  //context.write(key,result);
		  context.write(key,new IntWritable(sum));
		  //context.write(key,new IntWritable(1));
	  }
  }
  public static void main(String[] args) throws Exception
  {
	  Configuration conf = new Configuration();
	    //conf.set("name", "value")
	    
	    Job job = Job.getInstance(conf, "Word_Count");
	    job.setJarByClass(WordCnt.class);
	    job.setMapperClass(TokenizerMapper1.class);
	    //job.setCombinerClass(IntSumReducer.class);
	    job.setReducerClass(IntSumReducer1.class);
	    //job.setNumReduceTasks(0);
	    job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(IntWritable.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}

